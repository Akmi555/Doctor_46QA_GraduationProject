plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
// Шаг для Windows, так как русские шаги в Cucumber могут быть не найдены
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
dependencies {
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.27.0'
    //Фреймворк
    implementation group: 'org.testng', name: 'testng', version: '7.10.2'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.9'
    testImplementation 'io.qameta.allure:allure-testng:2.22.0'
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.0'//для api тестов
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.18.1'
    implementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.18.1'
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.9.2'

    // Новые зависимости
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    //Для работы с REST API
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.14'
    //Парсит JSON  в Java обьекты и обратно
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'
}
    // implementation 'org.slf4j:slf4j-nop:2.0.7'
    //compileOnly 'org.projectlombok:lombok:1.18.34'
    //annotationProcessor 'org.projectlombok:lombok:1.18.34'
    //testCompileOnly 'org.projectlombok:lombok:1.18.34'
    //testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'


test {
    useTestNG() {
        listeners << 'io.qameta.allure.testng.AllureTestNg'
    }
}
//сли указать таску smoke или regression. Сами Task мы прописываем в xml файлах
def registerTask(String taskName, String suitePath){
    tasks.register(taskName, Test){
        useTestNG(){
            suites suitePath
        }
        if(project.hasProperty('browser')){
            systemProperty 'browser', "${browser}"
        }
        finalizedBy 'allureReport' // Запуск allureReport после завершения тестов
    }
}

registerTask('smokePositive','src/test/resources/smokePositive.xml')
registerTask('smokeNegative','src/test/resources/smokeNegative.xml')
registerTask('rest_assured','src/test/resources/rest_assured.xml')
registerTask('smoke','src/test/resources/smoke.xml')
registerTask('login','src/test/resources/login.xml')

tasks.register('allure') {
    dependsOn 'allureServe' // Запускает allureServe при выполнении задачи allure
}
tasks.register('copyAllureHistory') {
    doLast {
        def allureReportDir = file("$buildDir/reports/allure-report")
        def allureResultsDir = file("$buildDir/allure-results")

        def historyDir = new File(allureReportDir, "history")
        def resultsHistoryDir = new File(allureResultsDir, "history")

        if (historyDir.exists()) {
            copy {
                from historyDir
                into resultsHistoryDir
            }
        }
    }
}

tasks.named('allureReport') {
    dependsOn 'copyAllureHistory' // Ensure this task runs before generating the report
}

// gradle allureReport
// gradle allureServe
